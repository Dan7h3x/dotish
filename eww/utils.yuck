(defvar utils-bar_rev    false)
(defvar duration         "250ms")


(defwidget utils-button [icon action css wait ?tip]
  (eventbox
    :cursor "pointer"
    (button
      :class css
      :onclick action
      :timeout wait
      :tooltip tip
      icon
    )
  )
)
(defwidget utils-bar []
  (box
    :class "utils-bar"
    (box
      :space-evenly false
      (revealer
        :transition "slideleft"
        :duration duration
        :reveal utils-bar_rev
        (box
          :class "buttons"
          :spacing 5
          (utils-button
            :css "colorpicker"
            :icon ""
            :action "actions colorpicker"
            :wait "300ms"
            :tip "Color Picker"
          )
          (utils-button
            :css "screenshot"
            :icon ""
            :action "actions screenshot full"
            :wait "300ms"
            :tip "Screenshot Full"
          )
          (utils-button
            :css "screenshot"
            :icon ""
            :action "actions screenshot crop"
            :wait "300ms"
            :tip "Screenshot Crop"
          )
          (utils-button
            :css "update"
            :icon ""
            :action "actions update"
            :wait "300ms"
            :tip "Update"
          )
        )
      )
      (eventbox
        :class "caret"
        :onclick "eww update utils-bar_rev=${!utils-bar_rev}"
        :tooltip {utils-bar_rev ? "close utils" : "open utils"}

        (image
          :path {utils-bar_rev ? "./icons/tray-open.svg" : "./icons/tray-closed.svg"}
          :image-width 30
          :image-height 30

        )


      )
    )
  )
)

(defvar revealed false)

(defwidget bar-tray []
    (box
        :class "tray-button"
        (eventbox
            :onhover "${EWW_CMD} update revealed='true'"
            :onhoverlost "${EWW_CMD} update revealed='false'"
            (box
                :style "background-color: none;"
                :space-evenly false
                :width 0
                :class "tray-button-rev"
                (revealer
                    :width 0
                    :transition "slideleft"
                    :reveal revealed
                    (systray)
                )
                (image
                    :path "${revealed ? "./icons/tray-open.svg" : "./icons/tray-closed.svg"}"
                    :class "${revealed ? "tray-opened" : "tray-closed"}"
                    :image-width 30
                    :image-height 30
                )
            )
        )
    )
)
(defwidget wallpaper []
    (button
      :onclick "swww img --transition-fps 75 --transition-type grow $(fd -t f . ~/.config/Wallpaper/ | shuf -n 1)"
        :class "wallpaper"
        (image
          :path "./icons/image.svg"
          :image-width 30
          :image-height 30
        )
    )
)
